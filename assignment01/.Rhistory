library(pacman)
p_load(readxl, dplyr, tidyr, ggplot2)
df <- read_excel('./data/tmp001.xls')
p_load(lubricate)
p_load(lubridate)
f.full <- data.frame(FDT_TIME=strptime("2010-04-17 23:59:40")+20*1:30240))
f.full <- data.frame(FDT_TIME=strptime("2010-04-17 23:59:40")+20*1:30240)
f.full <- data.frame(FDT_TIME=strptime("2010-04-17 23:59:40", "%Y-%m-%d %H:%M:%S")+20*1:30240)
View(f.full)
View(f.full)
f.full[1]
"2010-04-18 00:43:40" in f.full
"2010-04-18 00:43:40" %in% f.full
?strptime
as.POSIXct("2010-04-18 00:43:40") in f.full
as.POSIXct("2010-04-18 00:43:40") %in% f.full
f.full[1, 1]
typeof(.full[1, 1])
typeof(f.full([1, 1]))
typeof(f.full[1, 1])
typeof(as.POSIXct("2010-04-18 00:43:40"))
"2010-04-18 CST" %in% f.full
df$FDT_TIME
"2010-04-18 00:55:00 UTC" in df$FDT_TIME
"2010-04-18 00:55:00 UTC" %in% df$FDT_TIME
xls_path <- paste('./data/tmp00', 1:5, ".xls", sep="")
# 读取excel多个sheet并合并
excel_msheets <- function(path){
sheet_names_ls = excel_sheets(path)
sheets = lapply(sheet_names_ls, read_excel, path=path)
df_n = bind_rows(sheets[-length(sheets)])
df_n
}
# 读取全部的5个excel表格
df <- bind_rows(lapply(xls_path, excel_msheets))
colnames(df)
df_detector <- df[df$FSTR_LOOPGROUPID=='NHNX40(1)',]
View(df_detector)
View(df_detector)
a <- strptime("2010-04-17 16:00:00", "%Y-%m-%d %H:%M:%S")
a %in% df_detector$FDT_TIME
df_arrange <- df_detector %>% arrange(FDT_TIME)
View(df_arrange)
View(df_arrange)
f.final <- f.full %>% left_join(df_detector$FDT_TIME, by="FDT_TIME")
?left_join
# 导入包
library(pacman)
p_load(readxl, dplyr, tidyr, ggplot2)
# 数据读取 --------------------------------------------------------------------
xls_path <- paste('./data/tmp00', 1:5, ".xls", sep="")
# 读取excel多个sheet并合并
excel_msheets <- function(path){
sheet_names_ls = excel_sheets(path)
sheets = lapply(sheet_names_ls, read_excel, path=path)
df_n = bind_rows(sheets[-length(sheets)])
df_n
}
# 读取全部的5个excel表格
df <- bind_rows(lapply(xls_path, excel_msheets))
colnames(df)
df_detector <- df[df$FSTR_LOOPGROUPID=='NHNX40(1)',]
f.single <- df$FDT_TIME
View(f.full)
f.single <- as.character(df$FDT_TIME)
f.full<-data.frame(FDT_TIME=strptime("2010-04-17 23:59:40","%Y-%m-%d %H:%M:%S") + 20*1:30240)
View(f.full)
View(f.full)
f.final <- f.full %>% left_join(df_detector, by="FDT_TIME")
View(f.final)
View(f.final)
View(f.full)
View(f.final)
View(f.full)
?left_join
View(f.final)
f_index <- as.character(f.full$FDT_TIME)
"2010-04-24 18:42:40" in f_index
"2010-04-24 18:42:40" %in% f_index
View(f.full)
View(f.final)
View(df_detector)
View(f.final)
"2010-04-17 16:00:00" %in% f_index
View(f.final)
View(f.final)
View(f.full)
View(f.final)
View(f.final)
f.full[11908, 1]
f.final[11908, 1]
f.final[1, 1]
?strptime
df_detector[1, 1]
View(df_detector)
df_detector[3, 1]
df_detector[1, 3]
View(f.final)
View(f.full)
View(f.final)
?merge
f.final_merge <- f.full %>% merge(df_detector, by="FDT_TIME")
View(f.final_merge)
View(f.final_merge)
View(df_detector)
View(f.full)
View(f.final_merge)
View(f.final_merge)
View(f.final_merge)
f.final_merge <- f.full %>% merge(df_detector)
f.final_merge <- f.full %>% merge(df_detector, by="FDT_TIME")
f.final_merge[1, 1]
f.final[1, 1]
View(df)
df_detector[1, 3]
df_detector$FDT_TIME[1]
View(df_detector)
View(df_detector)
# 清空工作环境
rm(list=ls())
# 导入包
library(pacman)
p_load(readxl, dplyr, tidyr, ggplot2)
# 数据读取 --------------------------------------------------------------------
xls_path <- paste('./data/tmp00', 1:5, ".xls", sep="")
# 读取excel多个sheet并合并
excel_msheets <- function(path){
sheet_names_ls = excel_sheets(path)
sheets = lapply(sheet_names_ls, read_excel, path=path)
df_n = bind_rows(sheets[-length(sheets)])
df_n
}
# 读取全部的5个excel表格
df <- bind_rows(lapply(xls_path, excel_msheets))
colnames(df)
df_detector <- df[df$FSTR_LOOPGROUPID=='NHNX40(1)',]
# 冗余和缺失数据处理 ---------------------------------------------------------------
# 去除多余列
df_detector <- select(df_detector, -c('...1'))
# 冗余数据查找
dup_index <- df_detector$FDT_TIME %in% (df_detector$FDT_TIME[which(duplicated(df_detector$FDT_TIME))])
unique_df <- df_detector[!dup_index,]
dup_df <- df_detector[dup_index,]
# 冗余数据合并
mean_colnames <- c('FINT_VOLUME', 'FINT_SPEED', 'FINT_OCCUPY')
rows_to_add <- dup_df %>% group_by('FDT_TIME') %>% summarise(across(!mean_colnames, first), across(all_of(mean_colnames), mean))
# 去除\"FDT_TIME\"列
colnames(rows_to_add)
rows_to_add <- select(rows_to_add, -c('\"FDT_TIME\"'))
# 处理后的冗余数据和其他数据合并
dup_pro_df = bind_rows(unique_df, rows_to_add)
# 清除变量空间，释放内存
rm(rows_to_add, dup_df, unique_df)
p1 <- ggplot(df_detector, aes(x=FDT_TIME, y=FINT_VOLUME))
View(p1)
View(p1)
View(p1)
p2 <- ggplot(df_detector, aes(x=FDT_TIME, y=FINT_VOLUME))
library(cowplot)
install.packages("cowplot")
> library(cowplot)
library(cowplot)
plot_grid(p1, p2, nrow=1)
plot_grid(p1, p2, nrow=2)
View(p2)
p3 <- ggplot(df_detector, aes(x=FDT_TIME, y=FINT_SPEED)) + geom_line(color=‘blue’,alpha=0.5) + geom_point(size=0.5, shape=1,alpha=0.20)+labs(title=‘20s 速度图')
p3 <- ggplot(df_detector, aes(x=FDT_TIME, y=FINT_SPEED)) + geom_line(color='blue',alpha=0.5) + geom_point(size=0.5, shape=1,alpha=0.20)+labs(title='20s 速度图')
plot_grid(p1, p3, nrow=1)
plot_grid(p1, p2, p3, nrow=2)
load("C:/Documents/个人/研究生/助教/01_交通运输数据技术/04_作业/作业1_线圈数据分析/transient_storage.RData")
dup_pro_df <- dup_pro_df %>% arrange(FDT_TIME)
# 按时间排序
dup_pro_df <- dup_pro_df %>% arrange(FDT_TIME)
# 按时间排序
dup_pro_df <- dup_pro_df %>% arrange(FDT_TIME)
# 导入包
library(pacman)
p_load(readxl, dplyr, tidyr, ggplot2)
# 按时间排序
dup_pro_df <- dup_pro_df %>% arrange(FDT_TIME)
df_detector$FDT_TIME
typeo(FDT_TIME)
typeof(FDT_TIME)
typeof(df_detector$FDT_TIME)
?time_length
# 导入包
library(pacman)
p_load(readxl, dplyr, tidyr, ggplot2, lubridate)
?time_length
interval_nums <- as.integer(time_length(time_length(interval(start_time, end_time)), unit='second') / 20)
start_time <- make_datetime(2010, 4, 18, 0, 0, 0)
end_time <- make_datetime(2010, 4, 24, 23, 59, 40)
interval_nums <- as.integer(time_length(time_length(interval(start_time, end_time)), unit='second') / 20)
standard_seq <- start_time + 20 * (1: interval_nums)
standard_seq <- start_time + 20 * (0: interval_nums)
standard_seq[length(standard_seq)]
standard_seq_df <- data.frame()
View(standard_seq_df)
View(standard_seq_df)
standard_seq_df$FDT_TIME <- standard_seq
standard_seq_df <- standard_seq_df %>% mutate(FDT_TIME=standard_seq)
?data.frame
standard_seq_df <- data.frame(FDT_TIME=standard_seq)
View(standard_seq_df)
View(standard_seq_df)
# 缺失数据补全
non_lost_df <- left_join(standard_seq_df, df_detector, by=FDT_TIME)
# 缺失数据补全
non_lost_df <- left_join(standard_seq_df, df_detector, by="FDT_TIME")
View(dup_pro_df)
# 缺失数据补全
non_lost_df <- left_join(dup_pro_df, df_detector, by="FDT_TIME")
standard_seq_df[25865, 1]
dup_pro_df[25865, 1]
View(dup_pro_df)
View(dup_pro_df)
dup_pro_df[25865, 2]
# 冗余数据查找
dup_index <- df_detector$FDT_TIME %in% (df_detector$FDT_TIME[which(duplicated(df_detector$FDT_TIME))])
unique_df <- df_detector[!dup_index,]
dup_df <- df_detector[dup_index,]
# 冗余数据合并
mean_colnames <- c('FINT_VOLUME', 'FINT_SPEED', 'FINT_OCCUPY')
rows_to_add <- dup_df %>% group_by('FDT_TIME') %>% summarise(across(!mean_colnames, first), across(all_of(mean_colnames), mean))
# 去除\"FDT_TIME\"列
colnames(rows_to_add)
rows_to_add <- select(rows_to_add, -c('\"FDT_TIME\"'))
# 处理后的冗余数据和其他数据合并
dup_pro_df <- bind_rows(unique_df, rows_to_add)
# 清除变量空间，释放内存
rm(rows_to_add, dup_df, unique_df)
# 按时间排序
dup_pro_df <- dup_pro_df %>% arrange(FDT_TIME)
non_lost_df <- left_join(dup_pro_df, df_detector, by="FDT_TIME")
# 缺失数据补全
non_lost_df <- left_join(dup_pro_df, standard_seq_df, by="FDT_TIME")
View(non_lost_df)
# 获取补全后对应位置的数据
impute_res <- non_lost_df_[lost_location, :]
# 获取补全后对应位置的数据
impute_res <- non_lost_df_[lost_location,]
# 统计每天缺失数量
non_lost_df$DATE <- as.Date(non_lost_df$FDT_TIME)
lost_df <- non_lost_df %>% filter(is.na(FINT_VOLUME) | is.na(FINT_SPEED) | is.na(FINT_OCCUPY))
# 导入包
library(pacman)
p_load(readxl, dplyr, tidyr, ggplot2, lubridate, data.table)
# 统计每天缺失数量
non_lost_df$DATE <- as.Date(non_lost_df$FDT_TIME)
lost_df <- non_lost_df %>% filter(is.na(FINT_VOLUME) | is.na(FINT_SPEED) | is.na(FINT_OCCUPY))
lost_day <- lost_df %>% group_by(DATE) %>% summarise(LOST_NUM = n())
# 用平均值法对na位置进行补全
# 确定缺失值在表中的位置
lost_location <- which(is.na(non_lost_df$FINT_VOLUME))
non_lost_df_ <- copy(non_lost_df)
for (i in lost_location){
if (i > 3){
# 这里i-3和i-1要加括号
non_lost_df_[i, 3:5] <- as.integer(colMeans(non_lost_df[(i-3):(i-1), 3:5]))
}
}
# 获取补全后对应位置的数据
impute_res <- non_lost_df_[lost_location,]
impute_res
View(impute_res)
View(impute_res)
# 缺失数据处理 ------------------------------------------------------------------
# 生成标准时间序列
start_time <- make_datetime(2010, 4, 18, 0, 0, 0)
end_time <- make_datetime(2010, 4, 24, 23, 59, 40)
interval_nums <- as.integer(time_length(time_length(interval(start_time, end_time)), unit='second') / 20)
standard_seq <- start_time + 20 * (0: interval_nums)
standard_seq_df <- data.frame(FDT_TIME=standard_seq)
# 缺失数据补全
non_lost_df <- left_join(standard_seq_df, dup_pro_df, by="FDT_TIME")
# 统计每天缺失数量
non_lost_df$DATE <- as.Date(non_lost_df$FDT_TIME)
lost_df <- non_lost_df %>% filter(is.na(FINT_VOLUME) | is.na(FINT_SPEED) | is.na(FINT_OCCUPY))
lost_day <- lost_df %>% group_by(DATE) %>% summarise(LOST_NUM = n())
# 用平均值法对na位置进行补全
# 确定缺失值在表中的位置
lost_location <- which(is.na(non_lost_df$FINT_VOLUME))
non_lost_df_ <- copy(non_lost_df)
for (i in lost_location){
if (i > 3){
# 这里i-3和i-1要加括号
non_lost_df_[i, 3:5] <- as.integer(colMeans(non_lost_df[(i-3):(i-1), 3:5]))
}
}
# 获取补全后对应位置的数据
impute_res <- non_lost_df_[lost_location,]
View(impute_res)
lost_location <- which(is.na(non_lost_df$FINT_VOLUME))
for (i in lost_location){
if (i > 3){
# 这里i-3和i-1要加括号
non_lost_df[i, 3:5] <- as.integer(colMeans(non_lost_df[(i-3):(i-1), 3:5]))
}
}
# 获取补全后对应位置的数据
impute_res <- non_lost_df[lost_location,]
View(impute_res)
# 缺失数据补全
non_lost_df <- left_join(standard_seq_df, dup_pro_df, by="FDT_TIME")
for (i in lost_location){
if (i > 3){
# 这里i-3和i-1要加括号
non_lost_df[i, 3:5] <- as.integer(colMeans(non_lost_df[(i-3):(i-1), 3:5]))
non_lost_df[i, 2] <- 'NHNX40(1)'
}
}
# 获取补全后对应位置的数据
impute_res <- non_lost_df[lost_location,]
View(impute_res)
View(non_lost_df)
data_converge <- function(original_seq, t, assist_seq=c(), obj='volume'){
# t为以秒做单位的时间间隔
# assist_seq为可能使用的辅助序列，如计算速度聚集值时需要使用流量
# obj为聚集对象，obj <- volume, occupy, speed
# 将原始向量重整为聚集尺度的矩阵
reshape_mat <- matrix(original_seq, nrow=length(original_seq) %/% t, ncol=t)
reshape_mat
}
reshapevolume <- data_converge(non_lost_df$FINT_VOLUME, 60)
View(reshapevolume)
# 数据聚集 --------------------------------------------------------------------
data_converge <- function(original_seq, t, assist_seq=c(), obj='volume'){
# t为以秒做单位的时间间隔
# assist_seq为可能使用的辅助序列，如计算速度聚集值时需要使用流量
# obj为聚集对象，obj <- volume, occupy, speed
# 将原始向量重整为聚集尺度的矩阵
reshape_rows <- t %/% 20
reshape_cols <- length(original_seq) %/% reshape_rows + 1
reshape_mat <- matrix(original_seq, nrow=reshape_rows, ncol=reshape_cols)
reshape_mat
}
View(reshapevolume)
View(reshapevolume)
View(non_lost_df)
View(non_lost_df)
View(reshapevolume)
# 数据聚集 --------------------------------------------------------------------
data_converge <- function(original_seq, t, assist_seq=c(), obj='volume'){
# t为以秒做单位的时间间隔
# assist_seq为可能使用的辅助序列，如计算速度聚集值时需要使用流量
# obj为聚集对象，obj <- volume, occupy, speed
# 将原始向量重整为聚集尺度的矩阵
reshape_cols <- t %/% 20
reshape_rows <- length(original_seq) %/% reshape_rows + 1
reshape_mat <- t(matrix(original_seq, nrow=reshape_rows, ncol=reshape_cols))
reshape_mat
}
reshapevolume <- data_converge(non_lost_df$FINT_VOLUME, 60)
data_converge <- function(original_seq, t, assist_seq=c(), obj='volume'){
# t为以秒做单位的时间间隔
# assist_seq为可能使用的辅助序列，如计算速度聚集值时需要使用流量
# obj为聚集对象，obj <- volume, occupy, speed
# 将原始向量重整为聚集尺度的矩阵
reshape_cols <- t %/% 20
reshape_rows <- length(original_seq) %/% reshape_cols + 1
reshape_mat <- t(matrix(original_seq, nrow=reshape_rows, ncol=reshape_cols))
reshape_mat
}
reshapevolume <- data_converge(non_lost_df$FINT_VOLUME, 60)
?matrix
# 数据聚集 --------------------------------------------------------------------
data_converge <- function(original_seq, t, assist_seq=c(), obj='volume'){
# t为以秒做单位的时间间隔
# assist_seq为可能使用的辅助序列，如计算速度聚集值时需要使用流量
# obj为聚集对象，obj <- volume, occupy, speed
# 将原始向量重整为聚集尺度的矩阵
reshape_cols <- t %/% 20
reshape_rows <- length(original_seq) %/% reshape_cols + 1
reshape_mat <- data.frame(t(reshape(original_seq, nrow=reshape_rows, ncol=reshape_cols)))
reshape_mat
}
reshapevolume <- data_converge(non_lost_df$FINT_VOLUME, 60)
data_converge <- function(original_seq, t, assist_seq=c(), obj='volume'){
# t为以秒做单位的时间间隔
# assist_seq为可能使用的辅助序列，如计算速度聚集值时需要使用流量
# obj为聚集对象，obj <- volume, occupy, speed
# 将原始向量重整为聚集尺度的矩阵
reshape_cols <- t %/% 20
reshape_rows <- length(original_seq) %/% reshape_cols + 1
reshape_mat <- data.frame(t(matrix(original_seq, nrow=reshape_rows, ncol=reshape_cols)))
reshape_mat
}
reshapevolume <- data_converge(non_lost_df$FINT_VOLUME, 60)
speed_converge <- function(volume_seq, speed_seq){
vs_seq <- volume_seq * speed_seq
converge_speed <- sum(vs_seq) / sum(speed_seq)
converge_speed
}
test <- c(1, 2, 3, 1, 2)
speed_converge(test, test)
speed_converge <- function(volume_seq, speed_seq){
vs_seq <- volume_seq * speed_seq
converge_speed <- sum(vs_seq) / sum(speed_seq)
round(converge_speed, 2)
}
peed_converge(test, test)
speed_converge(test, test)
length(non_lost_df)
?nrow
nrow(non_lost_df)
integrate_df <- copy(non_lost_df)
integrate_df[10827,]
non_lost_df[10826,]
on_lost_df[10864:10826,]
non_lost_df[10864:10826,]
non_lost_df[10824:10826,]
data_converge <- function(original_df, t){
# t为以秒做单位的时间间隔
interval_nums <- t %/% 20
original_index <- 1:nrow(original_df)
converge_index <- original_index %/% interval_nums + 1
df$CONVERGE_INDEX <- converge_index
}
data_converge(integrate_df, 60)
# t为以秒做单位的时间间隔
interval_nums <- t %/% 20
data_converge <- function(original_df, t){
# t为以秒做单位的时间间隔
interval_nums <- t %/% 20
original_index <- 1:nrow(original_df)
converge_index <- original_index %/% interval_nums + 1
original_df$CONVERGE_INDEX <- converge_index
}
data_converge(integrate_df, 60)
View(integrate_df)
data_converge <- function(original_df, t){
# t为以秒做单位的时间间隔
interval_nums <- t %/% 20
original_index <- 1:nrow(original_df)
converge_index <- original_index %/% interval_nums + 1
original_df$CONVERGE_INDEX <- converge_index
original_df
}
data_converge(integrate_df, 60)
data_converge <- function(original_df, t){
# t为以秒做单位的时间间隔
interval_nums <- t %/% 20
original_index <- 1:nrow(original_df)
converge_index <- original_index %/% interval_nums + 1
print(converge_index)
original_df$CONVERGE_INDEX <- converge_index
original_df
}
data_converge(integrate_df, 60)
3 %/% 3
data_converge <- function(original_df, t){
# t为以秒做单位的时间间隔
interval_nums <- t %/% 20
original_index <- 0:(nrow(original_df) - 1)
converge_index <- original_index %/% interval_nums + 1
print(converge_index)
original_df$CONVERGE_INDEX <- converge_index
original_df
}
integrate_df <- copy(non_lost_df)
data_converge <- function(original_df, t){
# t为以秒做单位的时间间隔
interval_nums <- t %/% 20
original_index <- 0:(nrow(original_df) - 1)
converge_index <- original_index %/% interval_nums + 1
print(converge_index)
original_df$CONVERGE_INDEX <- converge_index
# original_df
}
data_converge(integrate_df, 60)
integrate_df <- copy(non_lost_df)
View(integrate_df)
data_converge <- function(original_df, t){
# t为以秒做单位的时间间隔
interval_nums <- t %/% 20
original_index <- 0:(nrow(original_df) - 1)
converge_index <- original_index %/% interval_nums + 1
print(converge_index)
original_df$CONVERGE_INDEX <- converge_index
# original_df
}
data_converge(integrate_df, 60)
View(integrate_df)
data_converge <- function(original_df, t){
# t为以秒做单位的时间间隔
interval_nums <- t %/% 20
original_index <- 0:(nrow(original_df) - 1)
converge_index <- original_index %/% interval_nums + 1
original_df$CONVERGE_INDEX <- converge_index
original_df
}
data_converge(integrate_df, 60)
View(integrate_df)
data_converge <- function(original_df, t){
# t为以秒做单位的时间间隔
interval_nums <- t %/% 20
original_index <- 0:(nrow(original_df) - 1)
converge_index <- original_index %/% interval_nums + 1
original_df$CONVERGE_INDEX <- converge_index
original_df
}
data_converge(integrate_df, 60)
View(integrate_df)
integrate_df <- data_converge(integrate_df, 60)
write.csv(x=impute_res, file='impute_result.csv')
View(standard_seq_df)
View(reshapevolume)
View(data_converge)
load("C:/Documents/个人/研究生/助教/01_交通运输数据技术/04_作业/作业1_线圈数据分析/transient_storage.RData")
load("C:/Documents/个人/研究生/助教/01_交通运输数据技术/04_作业/作业1_线圈数据分析/.Rhistory")
View(standard_seq_df)
View(standard_seq_df)
